= Secuencia de interacciones
:author: Jesus Ruiz
:email: hesus.ruiz@gmail.com
:revnumber: 1.0
:revdate: 25-08-2019
:numbered:
:imagesdir: assets
:icons: font
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:

(Version: {revnumber}, Version Date: {revdate})


== Descarga App y Creacion de Identidad

La empresa de la empresa de ticketing envia un correo a la empresa registrada en el evento, a la direccion de correo que proporciono en el momento del registro.

El correo proporciona instrucciones para que se descargen la aplicacion.
Tambien incluye un QR con los siguientes datos:

- URL del servidor de Credenciales, operado por una empresa diferente de la de ticketing
- TicketID, numero unico asociado a la entrada
- email del propietario de la entrada (el mismo email al que se envia el correo)
- Nombre (nombre y apellidos)
- Fecha (hora, minutos, segundos y decimas de segundo) de la generacion del email.
- Opcional (si la empresa de ticketing puede hacerlo): firma de todos los datos anteriores con una clave privada de la empresa de ticketing generada para los envios por correo.

Los usuarios se registran en la aplicacion *en local*, sin ninguna interaccion con ningun servidor. El proceso incluye la creacion de su AlastriaID.

El proceso de registro incluye el escaneo del QR en el pdf recibido de la empresa de ticketing.

A partir de ese momento, el usuario puede entra en su aplicacion proporcionando la contrase単a (no hace falta el usuario), para poder operar con ella.

ifdef::env-github[image::descarga-aplicacion.png[Creacion identidad]]
ifndef::env-github[]
[plantuml,descarga-aplicacion,png]
....

@startuml
autonumber
skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxmessagesize 150


participant "Empresa ticketing" as TM
box "Usuario" #LightCyan
  actor Usuario as U
  participant "Movil" as M
end box

TM -> M: Email con URL descarga y QR

== Descarga de app y registro del usuario ==
U -> M: Descarga App
U -> M: Contrase単a acceso local (integrado con huella dactilar)

== Creacion del DID de AlastriaID ==
U -> M: Click boton Genera AlastriaID
M -> M: Genera Claves Publica + Privada y DID
M -> M: Escaneo del QR en el pdf
M -> M: Muestra los datos del QR
U -> M: Confirmacion

M -> M: Guardar en local todos los datos

@enduml

....
endif::[]

=== Consideraciones GDPR

* La unica relacion es entre la empresa de ticketing y el usuario. La empresa de ticketing envia un email al usuario que previamente se registro, solicito la entrada y proporciono su consentimiento para ser contactado por email en temas relacionados con esa entrada. EL email se puede enviar en cualquier momento despues del registro, incluido recordatorios hasta el momento del evento.

* La aplicacion movil permite el registro del usuario en la misma sin ninguna interaccion con ninguna entidad. La aplicacion le solicita un minimo de datos personales y su consentimiento para almacenarlos en local.

== Obtencion de Credencial

Este flujo es independiente del anterior, pero se puede realizar a continuacion.

Aqui es donde el usuario envia una peticion de creacion de Credencial al servidor de Credenciales, operado por una empresa diferente a la de ticketing.

El usuario proporciona su consentimiento informado para que la App envie al servidor de Credenciales los datos del QR que se escaneo en el paso anterior. Opcionalmente, la App proporciona un formulario para introducir los datos manualmente.

Con esos datos, el servidor de Credenciales genera y envia una Credencial al email que se le ha pasado.
El usuario recibe el correo en su movil y hace click en el link, lo que abre la App y se le muestra la Credencial para que la acepte.

Con este proceso, se asegura que la persona que tiene la Credencial controla la direccion de correo que se envio para la creacion de la Credencial (y que esta embebido en la Credencial).
Por eso la credencial generada tiene un nivel *Low* en LoA eIDAS.

La credencial esta firmada por la entidad que opera el servidor de Credenciales, no por la empresa de ticketing.

ifdef::env-github[image::creacion-identidad.png[Creacion identidad]]
ifndef::env-github[]
[plantuml,creacion-identidad,png]
....

@startuml
autonumber
skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxmessagesize 150

box "Usuario" #LightCyan
  actor Usuario as U
  participant "Movil" as M
end box

box "Credential server" #LightCyan
  participant "Proveedor" as T
end box

== Peticion de obtencion de Credencial ==
U -> M: Click "Obtener credencial"
M -> T: getCredential(DID+QR)

T -> T: Genera Credential(QR)
T -> M: Email con Credential
U -> M: Lee email y click en link
M -> M: Muestra pantalla de confirmacion
M -> M: Guarda Credencial

@enduml
....
endif::[]

=== Consideraciones GDPR

* La unica relacion es entre el usuario y la empresa que opera el servidor de Credenciales. La aplicacion servidora la desarrolla IN2 pero la puede operar otra entidad incluyendo la propia IN2.

* Adicionalmente, la aplicacion muestra formularios de consentimiento tanto cuando el usuario envia datos personales cuando solicita la Credencial como cuando la guarda en el movil.

* El servidor de Credenciales *no guarda ningun dato personal* despues de la interaccion. Su unico proposito es crear una Credencial con el formato apropiado y firmarla de acuerdo al estandar W3C. No asume ninguna responsabilidad sobre el posible uso de la cresdencial generada.

== Demostracion de posesion de entrada ante un tercero

En este flujo el usuario demuestra que es el poseedor de una entrada ante un tercero, para poder acceder a algun servicio que el tercero proporciona. Por ejemplo entrar a una sala, acceder a un autobus, obtener un descuento en un hotel, etc.

Por sencillez de desarrollo e integracion, este flujo soporta solo la validacion presencial de la entrada. Es decir:

* El usuario demuestra la posesion de la entrada a una persona asociada al proveedor del servicio.
* Una vez realizada la validacion, esa persona permite o facilita el acceso al servicio. 

Por supuesto, este flujo no soporta todas las posibilidades de uso de Credenciales, pero es relativamente sencillo y puede ser muy util en muchos casos.

ifdef::env-github[image::presentacion-credencial.png[Presentacion de Credencial]]
ifndef::env-github[]
[plantuml,presentacion-credencial,png]
....

@startuml
autonumber
skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxmessagesize 150

box "Usuario" #LightCyan
  actor Usuario as US
  participant "Movil" as MU
end box

boundary "QR del servicio" as QR

box "Servicio" #LightCyan
  participant "Movil Agente" as MA
  actor "Agente" as AG
end box

== Obtencion de Presentation_Request ==
US -> MU: Click escaneo QR
QR -[#0000FF]-> MU: Obtiene Presentation_Request del QR
MU -> MU: Permite seleccion de Credenciales compatibles
US -> MU: Selecciona la Credencial

== Creacion de objeto Presentation ==
US -> MU: Confirma consentimiento
MU -> MU: Presenta QR con Presentation

== Verificacion de entrada ==
AG -> MA: Click escaneo QR
MU -[#0000FF]-> MA: Obtiene Presentation del QR
MA -> MA: Verifica Presentation
MA -> MA: Muestra signo y sonido de OK

AG -> US: Puede pasar!!

@enduml
....
endif::[]

=== Consideraciones generales

1. La primera fase *Obtencion de Presentation_Request* se podria realizar en "off-line" en cualquier momento anterior al uso del servicio. El QR puede estar expuesto de manera estatica en el sitio de provision del servicio, pero tambien anunciado en otros sitios incluidos los online. De hecho, podria estar ese QR en el correo inicial de registro.

2. En la fase *Verificacion de entrada* la aplicacion movil del Agente puede estar permanentemente preparada para escanear codigos QR, sin necesidad de que el Agente tenga que apretar ningun boton ni interaccionar con ella. Basta con que aproxime la camara de su movil al QR en la pantalla del usuario para que le muestre inmediatamente el resultado de la verificacion del objeto Presentation y de la Credencial dentro de ese objeto que representa la entrada. Este mecanismo es el preferido para reducir demoras cuando hay colas de usuarios solicitando el servicio.

3. Si se a単ade el email del usuario en el objeto Presentation, el movil del Agente puede enviar inmediatamente un correo con un objeto Receipt, quwe confirma la recepcion de los datos del usuario por parte del agente. EN este caso puede parecer "matar moscas a ca単onazos", pero es un patron que puede ser util en otros casos mas complicados.

=== Consideraciones GDPR

* El usuario es el que realiza conscientemente el "envio" del objeto Presentation que incluye la Credencial representando la entrada.

* El objeto Presentation esta firmado digitalmente por el usuario, e incluye tan solo:
** ticketID
** DID del usuario, sin ningun dato personal adicional
** proposito por el cual el usuario entrega la Credential al agente

* Lo anterior permite al agente demostrar a cualquier organo regulatorio que tiene el consentimiento del usuario para gestionar con un determinado proposito los datos recibidos

Por ello, se cumplen los principios de GDPR sobre minimizacion de datos y de obtencion del consentimiento informado para un proposito.

En el diagrama no se muestra, pero se realiza el archivado en una BBDD de los objetos Presentation recibidos, para su posterior uso si fuera necesario.