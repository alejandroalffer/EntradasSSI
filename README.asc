= Aplicación EntradasSSI: tickets y entradas a eventos en formato Self-Sovereign Identity
:author: Jesus Ruiz
:email: hesus.ruiz@gmail.com
:revnumber: 1.0
:revdate: 25-08-2019
:numbered:
:imagesdir: assets
:icons: font
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:

(Versión: {revnumber}, Fecha: {revdate})

Gestión de entradas a eventos con el sistema SSI (Self-Sovereign Identity) de AlastriaID.

== Principales participantes y flujo de información


ifdef::env-github[image::arquitectura1.png[Creacion identidad]]
ifndef::env-github[]
[plantuml,arquitectura1,png]
....

@startuml


frame Ticketing {
  artifact Servidor
  database "Registro Entradas" as Registro
}

frame Usuario {
  actor Asistente
  agent "App\nEntradasSSI" as Movil
}

frame Servicio {
  artifact "Dispositivo\nverificacion" as Device
}

Servidor ..> Registro
Asistente ..> Movil
Servidor -> Movil
Movil -> Device

@enduml

....
endif::[]

Hay tres entidades participantes, la empresa de ticketing, el usuario asistente al evento y el proveedor del servicio. Los pasos y flujos de datos son a grandes rasgos los siguientes:

1. El usuario se descarga la App EntradasSSI del market correspondiente (Android, iOS). El mecanismo por el cual el usuario tiene conocimiento de la aplicación y decide descargarsela no es objeto de este documento. En general, lo normal es que se le informe durante el proceso de compra o reserva de entradas, y se le puede enviar recordatorios posteriores a la compra y antes del evento.

2. El usuario registra sus datos en la App EntradasSSI en modo local, es decir sin que haya una comunicación de la App con ningún servidor de ninguna entidad. Para asegurar los datos, proporciona una contraseña (por supuesto en local también).

3. El usuario hace que la App EntradasSSI solicite a la empresa de ticketing, mediante una llamada al servidor de la misma, la generación de una representación digital de una "prueba de posesión" de la entrada al evento, y que se guarde esa prueba digital en el almacenamiento local del móvil. Esta prueba estará en formato Verifiable Credential tal como se describe en el estandar del W3C VC Working Group.

4. En cualquier momento que lo desee, el usuario podrá usar esa Verifiable Credential y presentarla ante cualquier persona que la podrá verificar para dar acceso al usuario a algun servicio. El acto de presentación de la Verifiable Credential se llama Presentation en terminologia del W3C VCWG.

5. El acto de Presentación se realiza de manera directa entre el usuario (es decir, su móvil) y el dispositivo de verificación del proveedor del servicio, en nuestro caso otro dispositivo móvil. Y todo ello sin la intervención de ninguna otra entidad intermedia.

Se puede ver más detalle de las interacciones a continuación, y el formato de los objetos Credential, Presentation Request y Presentation en el siguiente link: link:credenciales.asc[Formato de objetos].

== Descarga de la App y Creación de la Identidad Alastria

La empresa de ticketing envía un correo a la persona registrada en el evento, a la dirección de correo que proporcionó en el momento del registro.

El correo proporciona instrucciones para que el usuario se descarge la aplicación del market correspondiente (iOS o Android).
El correo incluye un QR con los siguientes datos:

- URL del servidor de Credenciales, operado por una empresa diferente de la de ticketing
- TicketID, número único asociado a la entrada
- email del propietario de la entrada (el mismo email al que se envía el correo)
- Nombre (nombre y apellidos)
- Fecha (hora, minutos, segundos y décimas de segundo) de la generación del email.
- Opcional (si la empresa de ticketing puede hacerlo): firma de todos los datos anteriores con una clave privada de la empresa de ticketing generada para los envios por correo.

Los usuarios se registran en la aplicacion *en local*, sin ninguna interacción con ningun servidor. El proceso incluye la creación de su AlastriaID.

El proceso de registro incluye el escaneo del QR en el pdf recibido de la empresa de ticketing.

A partir de ese momento, el usuario puede entrar en su aplicación proporcionando la contraseña (no hace falta el usuario), para poder operar con ella.

ifdef::env-github[image::descarga-aplicacion.png[Creacion identidad]]
ifndef::env-github[]
[plantuml,descarga-aplicacion,png]
....

@startuml
autonumber
skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxmessagesize 150


participant "Empresa ticketing" as TM
box "Usuario" #LightCyan
  actor Usuario as U
  participant "Movil" as M
end box

TM -> M: Email con URL descarga y QR

== Descarga de app y registro del usuario ==
U -> M: Descarga App
U -> M: Contraseña acceso local (integrado con huella dactilar)

== Creacion del DID de AlastriaID ==
U -> M: Click boton Genera AlastriaID
M -> M: Genera Claves Publica + Privada y DID
M -> M: Escaneo del QR en el pdf
M -> M: Muestra los datos del QR
U -> M: Confirmacion

M -> M: Guardar en local todos los datos

@enduml

....
endif::[]

=== Consideraciones GDPR

* La única relación es entre la empresa de ticketing y el usuario. La empresa de ticketing envía un email al usuario que previamente se registró, solicitó la entrada y proporcionó su consentimiento para ser contactado por email en temas relacionados con esa entrada. EL email se puede enviar en cualquier momento después del registro, incluyendo recordatorios hasta el momento del evento.

* La aplicación móvil permite el registro del usuario en la misma sin ninguna interacción con ninguna entidad. La aplicación le solicita un mínimo de datos personales y su consentimiento para almacenarlos en local.

== Obtención de la Credencial

Este flujo es independiente del anterior, pero se puede realizar inmediatamente a continuación.

Aquí es donde el usuario envía una petición de creación de Credencial al servidor de Credenciales, operado por una empresa diferente a la de ticketing.

El usuario proporciona su consentimiento informado para que la App envíe al servidor de Credenciales los datos del QR que se escaneó en el paso anterior. Opcionalmente, la App proporciona un formulario para introducir los datos manualmente.

Con esos datos, el servidor de Credenciales genera y envía una Credencial al email que se le ha pasado.
El usuario recibe el correo en su móvil y hace click en el link, lo que abre la App y se le muestra la Credencial para que la acepte.

Con este proceso, se asegura que la persona que tiene la Credencial controla la dirección de correo que se envió para la creación de la Credencial (y que esta embebido en la Credencial).
Por eso la credencial generada tiene un nivel *Low* en LoA eIDAS.

La credencial está firmada por la entidad que opera el servidor de Credenciales, no por la empresa de ticketing.

ifdef::env-github[image::creacion-identidad.png[Creacion identidad]]
ifndef::env-github[]
[plantuml,creacion-identidad,png]
....

@startuml
autonumber
skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxmessagesize 150

box "Usuario" #LightCyan
  actor Usuario as U
  participant "Movil" as M
end box

box "Credential server" #LightCyan
  participant "Proveedor" as T
end box

== Peticion de obtencion de Credencial ==
U -> M: Click "Obtener credencial"
M -> T: getCredential(DID+QR)

T -> T: Genera Credential(QR)
T -> M: Email con Credential
U -> M: Lee email y click en link
M -> M: Muestra pantalla de confirmacion
M -> M: Guarda Credencial

@enduml
....
endif::[]

=== Consideraciones GDPR

* La única relación es entre el usuario y la empresa que opera el servidor de Credenciales.

* Adicionalmente, la aplicación muestra formularios de consentimiento tanto cuando el usuario envía datos personales cuando solicita la Credencial como cuando la guarda en el móvil.

* El servidor de Credenciales *no guarda ningun dato personal* después de la interacción. Su único propósito es crear una Credencial con el formato apropiado y firmarla de acuerdo al estandar W3C. No asume ninguna responsabilidad sobre el posible uso de la cresdencial generada.

== Demostración de posesión de entrada ante un tercero

En este flujo el usuario demuestra que es el poseedor de una entrada ante un tercero, para poder acceder a algun servicio que el tercero proporciona. Por ejemplo entrar a una sala, acceder a un autobús, obtener un descuento en un hotel, etc.

Por sencillez de desarrollo e integración, este flujo soporta solo la validación presencial de la entrada. Es decir:

* El usuario demuestra la posesión de la entrada a una persona asociada al proveedor del servicio.
* Una vez realizada la validación, esa persona permite o facilita el acceso al servicio. 

Por supuesto, este flujo no soporta todas las posibilidades de uso de Credenciales, pero es relativamente sencillo y puede ser muy útil en muchos casos.

ifdef::env-github[image::presentacion-credencial.png[Presentacion de Credencial]]
ifndef::env-github[]
[plantuml,presentacion-credencial,png]
....

@startuml
autonumber
skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxmessagesize 150

box "Usuario" #LightCyan
  actor Usuario as US
  participant "Movil" as MU
end box

boundary "QR del servicio" as QR

box "Servicio" #LightCyan
  participant "Movil Agente" as MA
  actor "Agente" as AG
end box

== Obtencion de Presentation_Request ==
US -> MU: Click escaneo QR
QR -[#0000FF]-> MU: Obtiene Presentation_Request del QR
MU -> MU: Permite seleccion de Credenciales compatibles
US -> MU: Selecciona la Credencial

== Creacion de objeto Presentation ==
US -> MU: Confirma consentimiento
MU -> MU: Presenta QR con Presentation

== Verificacion de entrada ==
AG -> MA: Click escaneo QR
MU -[#0000FF]-> MA: Obtiene Presentation del QR
MA -> MA: Verifica Presentation
MA -> MA: Muestra signo y sonido de OK

AG -> US: Puede pasar!!

@enduml
....
endif::[]

=== Consideraciones generales

1. La primera fase *Obtención de Presentation_Request* se podria realizar en "off-line" en cualquier momento anterior al uso del servicio. El QR puede estar expuesto de manera estática en el sitio de provisión del servicio, pero también anunciado en otros sitios incluidos los online. De hecho, podría estar ese QR en el correo inicial de registro.

2. En la fase *Verificación de entrada* la aplicación móvil del Agente puede estar permanentemente preparada para escanear codigos QR, sin necesidad de que el Agente tenga que apretar ningún botón ni interaccionar con ella. Basta con que aproxime la camara de su móvil al QR en la pantalla del usuario para que le muestre inmediatamente el resultado de la verificación del objeto Presentation y de la Credencial dentro de ese objeto que representa la entrada. Este mecanismo es el preferido para reducir demoras cuando hay colas de usuarios solicitando el servicio.

3. Si se añade el email del usuario en el objeto Presentation, el móvil del Agente puede enviar inmediatamente un correo con un objeto Receipt, que confirma la recepción de los datos del usuario por parte del agente. En este caso puede parecer excesivo, pero es un patron que puede ser útil en otros casos mas complicados.

=== Consideraciones GDPR

* El usuario es el que realiza conscientemente el "envio" del objeto Presentation que incluye la Credencial representando la entrada.

* El objeto Presentation está firmado digitalmente por el usuario, e incluye tan solo:
** ticketID
** DID del usuario, sin ningún dato personal adicional
** propósito por el cual el usuario entrega la Credential al agente

* Lo anterior permite al agente demostrar a cualquier órgano regulatorio que tiene el consentimiento del usuario para gestionar con un determinado propósito los datos recibidos

Por ello, se cumplen los principios de GDPR sobre minimización de datos y de obtención del consentimiento informado para un propósito.

En el diagrama no se muestra, pero se realiza el archivado en una BBDD de los objetos Presentation recibidos, para su posterior uso si fuera necesario.
