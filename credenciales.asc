# Credential conteniendo la entrada

Esta es la Credencial que envia de vuelta el servidor de ticketing al movil del usuario.
El formato es un JWT firmado por el servidor de ticketing.

## Cabecera JWT de la Credential

```javascript
{
    "alg": "ES256",
    "typ": "JWT",
    "kid": "did:ala:quor:redt:QmeeasCZ9jLbX...ueBJ7d7csxhb#keys-1",
}
```


El campo **kid** (key ID) es el identificador de la clave privada usada para firmar el JWT. En este caso de uso vamos a usar un sistema muy sencillo donde el formato consiste en las siguientes partes:

- Un **prefijo** constante (para este caso de uso): "did:ala:quor:redt:"
- Una **parte variable** que consiste en los 256 bits de la Clave Publica generada durante el proceso de registro del usuario en la aplicacion, codificados en formato Base64.
- Un **sufijo** constante: "#keys-1"

El algoritmo usado para la generacion del par de claves es el ES256, que corresponde a ECDSA usando la curva P-256 y con SHA-256. 

## Payload JWT de la Credential


```javascript
{
  "iss": "did:alastria:quorum:redt:HsdfjSjqd63hg...mked736hw7jj",
  "sub": "did:alastria:quorum:redt:QmeeasCZ9jLbX...ueBJ7d7csxhb",
  "iat": 1525465044,
  "exp": 1530735444,
  "nbf": 1525465044,
  "vc": {
    "@context": [
      "https://www.w3.org/2018/credentials/v1",
      "JWT"
    ],
    "type": ["VerifiableCredential", "AlastriaVCTicket"],
    "credentialSubject": {
      "levelOfAssurance": "Basic",
      "ticketID": "7834857332377859",
    }
  }
}
```


* **"iss"** (“issuer”): Este es el DID de la empresa de ticketing. Este DID se genera manualmente al principio de todo cuando se da de alta a la empresa en Alastria.

* **"sub"**: El DID del usuario al que se refiere la Credencial. Este DID es el que se recibe en la llamada del movil al servidor de ticketing.

* **"iat"** (Issued at): La fecha y hora en la que se genera la credencial. Su valor es un NumericDate.

> Un valor NumericDate es un valor numerico JSON representando el numero de segundos desde 1970-01-01T00:00:00Z UTC hasta la fecha de creacion de la Credencial en UTC, ignorando los segundos del año bisiesto. Es equivalente al IEEE Std 1003.1,  2013 Edition [POSIX.1] "Seconds Since the Epoch".

* **"exp"** (Expiration time): Debe ponerse a un plazo razonable despues de la generacion de la Credencial, para permitir que pueda ser usada despues del evento. En este caso vamos a usar un año despues de la generacion de la credencial.

* "**nbf**" (Not Before): Fecha y hora de comienzo del evento.
    
* **"ticketID"** el numero asignado al ticket del usuario

El resto de los campos son las constantes en el ejemplo.

## Firma del JWT de Credencial

La cabecera y el payload se firman de acuerdo con el estandar JWT, usando la clave privada referenciada por el kid y con el algoritmo ES256. Para poder transmitir el JWT sin que hayan problemas, se usa la representacion Base64.

El resultado de todo ello se puede ver en el siguiente ejemplo de JWT. Esta cadena de caracteres es la que se debe usar posteriormente cuando se incluye la Credential en otros objetos:

    eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.tyh-VfuzIxCyGYDlkBA7DfyjrqmSHu6pQ2hoZuFqUSLPNY2N0mpHb3nk5K17HWP_3cYHBw7AhHale5wky6-sVA

# Presentation Request

Es el objeto representado en el QR del evento y que escanea el usuario. Se podrian poner tan solo los campos necesarios, pero para hacer un sistema generico, se construye el JWT firmado y entonces se representa el JWT en el codigo QR que se puede colocar en cualquier sitio.

EL JWT ya esta codificado en formato Base64 por lo que se puede representar directamente en el QR sin mas transformaciones.

## Presentation Request Header

La cabecera es la misma que en la Credencial, excepto que **kid** representa la clave publica del proveedor del servicio.

```javascript
{
    "alg": "ES256",
    "typ": "JWT",
    "kid": "did:ala:quor:redt:QmeeasCZ9jLbX...ueBJ7d7csxhb#keys-1",
}
```


## 5.2. Presentation Request Payload

El payload es el siguiente:

```javascript
{
  "iss": "did:alastria:quorum:testnet1:QmeeasCZ9jLbX...ueBJ7d7csxhb",
  "iat": 1525465044,
  "exp": 1530735444,

  "pr": {
    "@context": [
      "https://www.w3.org/2018/credentials/v1",
      "JWT"
    ],
    "type": ["VerifiablePresentationRequest", "AlastriaVPRTicket"],
	"procUrl": "https://www.direccion_evento.com/alastria/businessprocess/0001",
    "procHash": "H398sjHd...kldjUYn475n",
    "data": [
      {
        "@context": "JWT",
        "levelOfAssurance": "Low",
        "required": true,
        "field_name": "ticketID",
      }
    ],
  }
```

Los campos son los siguientes:

* **"iss"** (“issuer”): El DID del proveedor del servicio. Creado al principio cuando se registra a la entidad en Alastria.

* **"iat"** (Issued at): EL mismo significado que en la Credencial.

* **"exp"** (Expiration time): Lo pondremos a un año despues de comenzar el evento, pero no es muy importante en este caso.

* "**procUrl**" (Purpose URL): Es la URL apuntando a un documento externo que describe el proposito para el cual se le piden los datos al usuario, facilitando el cumplimiento de GDPR. El documento debe estar en hosting en algun servidor operado por el provvedor de servicio y debe tener los terminos y condiciones habituales para este tipo de servicios. El documento sera recuperado automaticamente por la aplicacion movil del usuario y presentado en pantalla para que el usuario lo lea y acepte.

* "**procHash**" (Purpose Hash): El hash del documento externo referenciado por **procUrl**. Este mecanismo permite detectar modificaciones posteriores al documento. EL algoritmo de hash a usar es el SHA-256.

* **"data"**: Es un array JSON con la lista de los campos que se le solicitan al usuario. Opera de manera similar a un formulario de peticion de datos en una pagina web. En este caso solo hay un campo y su contenido es:

    * **"@context"**: Tal como aparece en el ejemplo.

    * **"levelOfAssurance"**: Corresponde con el "Level of Assurance" de eIDAS requerido para el campo (“Low”, “Substantial”, “High”), mas un nivel adicional mas bajo (“Self”) para auto-certificaciones, es decir cuando el usuario dice algo de si mismo. Este campo especifica el menor LoA que debe tener el campo proporcionado por el usuario para que el proveedor de servicio lo considere aceptable. Si el campo no se especifica, se considera "Self". En nuestro caso, el nivel requerido sera "Low".

    * **required**: Si el campo es obligatorio u opcional En nuestro caso es obligatorio.

    * **field_name**: El nombre del campo, tal como se define en la ontologia correspondiente especificada por el campo **@context**. En nuestro caso, el nombre es "ticketID".


## Presentation Request Signature

La firma se realiza de igual manera que en la Credencial.


# Presentation

El objeto Presentation es el que envia el usuario al proveedor del servicio. En general, el objeto Presentation es una coleccion de una o mas Credenciales que contienen agregadamente los datos que requiere el proveedor de servicio para la prestacion del mismo. Las Credenciales incluidas en la Presentation no tienen por que ser generadas por la misma entidad.

En nuestro caso concreto, el objeto Presentation contendra una sola Credencial, la que representa al ticket y que fue generada por la empresa de ticketing.

El objeto Presentation es un JWT firmado por el usuario y con la siguiente estructura:

## Presentation header

La misma cabecera de JWT que en la Credential. El **kid** representa la clave del usuario.

```javascript
{
    "alg": "ES256",
    "typ": "JWT",
    "kid": "did:ala:quor:redt:QmeeasCZ9jLbX...ueBJ7d7csxhb#keys-1",
}
```


## Presentation payload

El contenido del payload es muy parecido al de los otros objetos descritos anteriormente.

```javascript
{
  "iss": "did:alastria:quorum:redt:QmeeasCZ9jLbX...ueBJ7d7csxhb",
  "aud": "did:alastria:quorum:redt:QmeeasCZ9jLbX...ueBJ7d7csxhb",
  "iat": 1525465044,
  "vp": {
    "@context": [
      "https://www.w3.org/2018/credentials/v1",
      "JWT"
    ],
    "type": ["VerifiablePresentation", "AlastriaVPTicket"],
    "proc": "H398sjHd...kldjUYn475n",
    // base64url-encoded JWT as string
    "verifiableCredential": [eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c]
  }

}
```

Los campos mas relevantes son:

* **"iss"** (Issuer): El DID del usuario.

* **"aud"** (Audience): Este campo identifica el receptor de este JWT. En nuestro caso debe contener el DID del proveedor del servicio.

* **"iat"** (Issued at): Fecha en la que se genero el JWT.

* "**procUrl**" (Process URL): La URL al documento externo que se recibio en el Presentation Request correspondiente.

* "**procHash**" (Process Hash): El hash del documento.

* **"verifiableCredential"**: Un array de Credential en formato JWT. Es decir, cada elemento es una JWT representado en Base64. En nuestro caso solo habra una Credential, y en el ejemplo se muestra una de ejemplo para mostrar explicitamente que no se incluye en claro.

## 4.3. Presentation signature

Se firma y representa en Base64 de manera estandar como un JWT.

